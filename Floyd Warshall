Short on funds for the festive season? Register for Hackathon and win cash rewards!  

banner
The problem is to find the shortest distances between every pair of vertices in a given edge-weighted directed graph. The graph is represented as an adjacency matrix of size n*n. Matrix[i][j] denotes the weight of the edge from i to j. If Matrix[i][j]=-1, it means there is no edge from i to j.
Do it in-place.

Example 1:

Input: matrix = {{0,25},{-1,0}}

Output: {{0,25},{-1,0}}

Explanation: The shortest distance between
every pair is already given(if it exists).




def shortestDistances(matrix):
    n = len(matrix)
    
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if matrix[i][k] != -1 and matrix[k][j] != -1:
                    if matrix[i][j] == -1:
                        matrix[i][j] = matrix[i][k] + matrix[k][j]
                    else:
                        matrix[i][j] = min(matrix[i][j], matrix[i][k] + matrix[k][j])

# Example usage
matrix = [[0, 25], [-1, 0]]
shortestDistances(matrix)

for row in matrix:
    print(row)
